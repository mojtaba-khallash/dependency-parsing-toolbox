
# name of the ensemble models
modelName = stanford

# the model files will be saved in (or loaded from) this directory
# switch to models/extended if you want to parse with better models (~1 F1 point improvement) but slightly slower.
# make sure you download the models as well before parsing!
modelDirectory = models

# temporary files created during execution will be stored (and deleted on completion) in this directory
workingDirectory = tmp

# prefix output files generated during evaluation with this string (all output files are saved in workingDirectory)
outputPrefix = output

#
# comma-separated list of base models to use
# accepted model names:
#   nivreeager-ltr
#   nivrestandard-ltr
#   covnonproj-ltr
#   nivrestandard-rtl
#   nivreeager-rtl
#   covnonproj-rtl
#
baseModelNames = nivreeager-ltr+PP,nivrestandard-ltr+PP,nivreeager-rtl+PP,nivrestandard-rtl+PP

featureModelNames = nivreeager-ltr-guide.xml,nivrestandard-ltr-guide.xml,nivreeager-rtl-guide.xml,nivrestandard-rtl-guide.xml

# training and test corpora
# trainCorpus = /u/nlp/data/StanfordDependencies/train.stanford
# testCorpus = /u/nlp/data/StanfordDependencies/test.stanford

# should we run the training processes in separate threads for each base model?
multiThreadTrain = true

# should we run the evaluation processes in separate threads for each base model?
multiThreadEval = true

# if multi-threaded processing is enabled, how many cores to use in the thread pool?
threadCount = 4

# data split threshold for base models
# This has to higher for Stanford because the default value (100) yields an empty OTHER class
dataSplitThreshold = 200

# debug|info|warn|error|fatal|off
# logLevel = info

# Training options for liblinear.
# libLinearOptions = -s_4_-e_0.1_-c_0.2_-B_1.0

# Liblinear log level: silent|error|all
# libLinearLogLevel = error

# Use this external program to train liblinear (should be more robust)
# libLinearTrain = 

# Split base models based on this column.
# dataSplitColumn = POSTAG

####
#### Use this in combination with "-s Input[0]" for non covington models or with "-s Right[0]" for covington models
####

# Data split threshold for base models.
# dataSplitThreshold = 100

#Reparsing algorithm: majority|attardi|eisner
reparseAlgorithm = attardi